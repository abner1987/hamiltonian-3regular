import networkx as nx
import matplotlib.pyplot as plt
import time

#author:jinhui duan
#email:646768522@qq.com

def generate_special_3_regular_graph(k):
    """
    生成一个特定结构的平面3-正则图, 顶点数=6k。
    每个块含有6个顶点，分成两个三角形并做相应连边。
    """
    G = nx.Graph()
    num_vertices = 6 * k
    G.add_nodes_from(range(1, num_vertices + 1))

    for i in range(k):
        t1_v = [6 * i + 1, 6 * i + 2, 6 * i + 3]
        t2_v = [6 * i + 4, 6 * i + 5, 6 * i + 6]

        # 块内：各自三角形
        G.add_edges_from([(t1_v[0], t1_v[1]),
                          (t1_v[1], t1_v[2]),
                          (t1_v[2], t1_v[0])])
        G.add_edges_from([(t2_v[0], t2_v[1]),
                          (t2_v[1], t2_v[2]),
                          (t2_v[2], t2_v[0])])
        # 块内：两个三角形之间的连边
        G.add_edge(t1_v[0], t2_v[0])
        G.add_edge(t1_v[1], t2_v[1])

        # 块与块之间连边(只连顶点2和5 - 在这里对应 t1_v[2] 和 t2_v[2]）
        if i < k - 1:
            next_t1_v = [6 * (i + 1) + 1, 6 * (i + 1) + 2, 6 * (i + 1) + 3]
            G.add_edge(t2_v[2], next_t1_v[2])

    # 首尾闭合(若k>1则把最后块的 t2_v[2] 与第一块的 t1_v[2] 连起来)
    if k > 1:
        first_t1_v = [1, 2, 3]
        last_t2_v = [6*(k-1)+4, 6*(k-1)+5, 6*(k-1)+6]
        G.add_edge(last_t2_v[2], first_t1_v[2])

    return G


def direct_triangle_edges(k):
    """
    直接根据图的构造规律，返回所有三角形边的集合 T。
    每块有2个三角形, 每个三角形 3 条边 => 2 * 3 = 6 条。
    共k块 => 总共2k个三角形 => 6k 条三角形边。
    返回形式为: set( frozenset({u,v}), ... )
    """
    T = set()
    for i in range(k):
        # 这块的两个三角形
        t1_v = [6*i + 1, 6*i + 2, 6*i + 3]
        t2_v = [6*i + 4, 6*i + 5, 6*i + 6]
        # 三角形1的3条边
        T.add(frozenset([t1_v[0], t1_v[1]]))
        T.add(frozenset([t1_v[1], t1_v[2]]))
        T.add(frozenset([t1_v[2], t1_v[0]]))
        # 三角形2的3条边
        T.add(frozenset([t2_v[0], t2_v[1]]))
        T.add(frozenset([t2_v[1], t2_v[2]]))
        T.add(frozenset([t2_v[2], t2_v[0]]))
    return T


def get_edge_set(graph):
    """
    将 NetworkX 图中的所有边存到 set 中 (使用 frozenset 方便集合运算).
    """
    E = set()
    for u, v in graph.edges():
        if u > v:
            u, v = v, u
        E.add(frozenset((u, v)))
    return E


def construct_perfect_matching(E, T):
    """
    构造完美匹配：就是将三角形里的所有边从 E 中移除。
    M = E - T
    """
    return E - T


def construct_supplementary_edges(k):
    """
    直接根据构造规律, 生成补充边集 R 以及需要从匹配中移除的边 edges_to_remove_from_M.
    与原版本相同, 只是无需传 G, 因为能通过k与下标推断所有需要的R与“要删的共享边”。
    """
    R = set()
    edges_to_remove_from_M = set()

    for i in range(k):
        t1_v = [6*i + 1, 6*i + 2, 6*i + 3]
        t2_v = [6*i + 4, 6*i + 5, 6*i + 6]

        # case1: 在各三角形里再加一些内部边(实际上是为了“后面度数调节”能保持连通)
        R.add(frozenset([t1_v[0], t1_v[1]]))
        R.add(frozenset([t1_v[1], t1_v[2]]))
        R.add(frozenset([t2_v[0], t2_v[1]]))
        R.add(frozenset([t2_v[1], t2_v[2]]))

        # case2: 两三角形间共享的一条边(如 [t1_v[1], t2_v[1]]) 要从匹配 M 中移除
        shared_edge = frozenset([t1_v[1], t2_v[1]])
        edges_to_remove_from_M.add(shared_edge)

        # case3: 跨块连接
        if i < k - 1:
            next_t1_v = [6*(i+1)+1, 6*(i+1)+2, 6*(i+1)+3]
            R.add(frozenset([t2_v[2], next_t1_v[2]]))

    # 首尾闭合
    if k > 1:
        first_t1_v = [1, 2, 3]
        last_t2_v  = [6*(k-1)+4, 6*(k-1)+5, 6*(k-1)+6]
        R.add(frozenset([last_t2_v[2], first_t1_v[2]]))

    return R, edges_to_remove_from_M


def build_hamiltonian(M, R, edges_to_remove_from_M):
    """
    将 M、R 合并后, 去掉 M 里需要移除的边 => 得到一个度数可能为2或3的子图,
    但“度数=3”的边就是 edges_to_remove_from_M.
    最终得到 2-正则连通图 => 哈密顿环.
    """
    M_modified = M - edges_to_remove_from_M
    H = M_modified.union(R)
    return H


def verify_hamiltonian_cycle(H, num_vertices):
    """
    验证 H 是否为哈密顿回路：连通、每顶点度数=2、顶点总数正确.
    H 以 set(frozenset({u,v}),...)形式存储.
    """
    G_temp = nx.Graph()
    for edge in H:
        u, v = tuple(edge)
        G_temp.add_edge(u, v)

    # 1) 是否连通
    if not nx.is_connected(G_temp):
        return False

    # 2) 是否每个点度数=2
    for v in G_temp.nodes():
        if G_temp.degree(v) != 2:
            return False

    # 3) 节点数是否正好 = num_vertices
    if G_temp.number_of_nodes() != num_vertices:
        return False

    return True


def measure_execution_time(k):
    """
    综合测试从生成图 -> 构造 T/M/R -> 合并 -> 验证 的全过程耗时,
    并返回是否有效哈密顿回路.
    """
    start_time = time.time()

    # 1) 生成图
    G = generate_special_3_regular_graph(k)
    num_vertices = 6 * k

    # 2) 获取所有边 E
    E = get_edge_set(G)

    # 3) 直接构造三角形边集 T (避免 enumerate_all_cliques)
    T = direct_triangle_edges(k)

    # 4) 构造完美匹配 M
    M = construct_perfect_matching(E, T)

    # 5) 构造补充边 R, 并记录需要从 M 移除的边
    R, edges_to_remove_from_M = construct_supplementary_edges(k)

    # 6) 合并得到哈密顿回路子图
    H_prime = build_hamiltonian(M, R, edges_to_remove_from_M)

    # 7) 验证
    is_valid = verify_hamiltonian_cycle(H_prime, num_vertices)

    end_time = time.time()
    return (end_time - start_time), is_valid


def plot_execution_times(k_values, times):
    """
    绘制随 k 增大时的执行时间曲线
    """
    plt.figure(figsize=(8,5))
    plt.plot(k_values, times, marker='o', linestyle='-', color='b')
    plt.xlabel("k")
    plt.ylabel("Execution Time (s)")
    plt.title("Execution Time vs k")
    plt.grid(True)
    plt.show()


if __name__ == "__main__":
    k_values = [100000,500000, 1000000, 1500000,2000000]  
    execution_times = []

    for k in k_values:
        t, valid = measure_execution_time(k)
        execution_times.append(t)
        print(f"k={k}, vertices={6*k}, Time={t:.4f}s, Valid={valid}")

    plot_execution_times(k_values, execution_times)
